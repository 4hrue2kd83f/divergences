
# Divided Monarchists
# Made by Victoria/Pacifica
# Refer to comments here and in 02_french_monarchism to get an idea as to how this works.
brg_set_dvg_jeanism_variables = {
	#Bonapartist Variables
	set_variable = { name = jeanist_progress value = 10 } #Master progress variable. This is incremented by the other variables, and corresponds to the progress bar if the Bonapartists are in the lead.
	set_variable = { name = jeanist_progress_from_characters value = 0 } #Progress-from-character component. This updates with the combined popularities of every Bonapartist character later on, and is used to calculate bonapartist_progress_next.
	set_variable = { name = jeanist_progress_from_igs value = 0 } #Progress-from-IG component. This updates with the combined clout of every Bonapartist IG later on, and is used to calculate bonapartist_progress_next.
	set_variable = { name = jeanist_progress_from_military value = 0 } #Progress-from-military-building component. This updates with the sum of military building levels in France later on, and is used to calculate bonapartist_progress_next.
	set_variable = { name = jeanist_progress_from_legitimacy value = 0 } #Progress-from-legitimacy component. This updates with the current government legitimacy, and is also used to calculate bonapartist_progress_next.
	set_variable = { name = jeanist_progress_from_effects value = 0 } #Final element in bonapartist_progress_next. This is defined by various effects, and is based solely on scripted effects. This is how designers can manually grant ticking bonuses or maluses to this mechanic.
	set_variable = { name = jeanist_progress_next value = 0 } #This variable is an incrementor - it is calculated by the previous five variables on a weekly basis, and is added to bonapartist_progress on the monthly. This is used in localisation to tell the player what the current rate of change for bonapartist_progress is.
	
	#Orleanist Variables
	if = {
		limit = {
			game_date < 1836.2.1 #Why? Because ruler scope doesn't exist the first time this script is executed.
		}
		set_variable = { name = parliamentarian_progress value = 25 } #This is done because the Orleanists have an advantage the first time the script is executed, but do not necessarily have that advantage if the JE is activated elsewhere.
	}
	else = {
		set_variable = { name = parliamentarian_progress value = 10 }
	}
	set_variable = { name = parliamentarian_progress_from_characters value = 0 } 
	set_variable = { name = parliamentarian_progress_from_igs value = 0 }
	set_variable = { name = parliamentarian_progress_from_factories value = 0 } #These variables use the same scheme as the Bonapartist ones, with the exception that Orleanists derive from the sum of light/heavy industry building levels in France.
	set_variable = { name = parliamentarian_progress_from_legitimacy value = 0 }
	set_variable = { name = parliamentarian_progress_from_effects value = 0 }
	set_variable = { name = parliamentarian_progress_next value = 0 }

	set_variable = { name = ig_weight value = 0 } #This variable is used solely for mathematical purposes, and is set as equivalent to the clout of a given interest group. It exists so that IGs can be weighted higher or lower depending on whether they're in-government or not.
}

brg_weekly_pulse_jeanist_progress = { #Effects like these are run three times, one for each house. All of them function essentially the same way.
	set_variable = { name = jeanist_progress_from_characters value = 0 } #All of these variables are ephemeral and should never be manually set to anything.
	set_variable = { name = jeanist_progress_from_igs value = 0 }
	set_variable = { name = jeanist_progress_from_military value = 0 }
	set_variable = { name = jeanist_progress_from_legitimacy value = root.government_legitimacy } #Government legitimacy is a single constant, and so this variable is set immediately rather than needing a calculation.
	set_variable = { name = jeanist_progress_next value = 0 }
	#From Characters
	every_scope_character = {
		limit = {
			has_ideology = ideology:ideology_jeanist
		}
		ROOT = {
			change_variable = { name = jeanist_progress_from_characters add = prev.popularity } #for_each loop. For each character of ideology_bonapartist, add that character's popularity to bonapartist_progress_from_characters.
		}
	}
	change_variable = { name = jeanist_progress_from_characters divide = 100 } #Character popularities are -100/100, rather than our desired -1/1, so divide by 100.
	# From Interest Groups
	every_interest_group = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_jeanist
			}
		}
		ROOT = {														#for_each loop. For each interest group of ideology_bonapartist, perform the following steps in sequence.
			set_variable = { name = ig_weight value = prev.ig_clout } 	#1. Set ig_weight as equal to the interest group's clout.
		}
		if = {
			limit = {
				is_in_government = yes
			}
			ROOT = {
				change_variable = { name = ig_weight multiply = 3 }		#2. If that IG is in government, multiply ig_weight by a given value.
			}
		}
		ROOT = {
			change_variable = { name = jeanist_progress_from_igs add = var:ig_weight }	#3. Add ig_weight to the central bonapartist_progress_from_igs variable. This will run until there are no more Bonapartist IGs.
		}
	}
	# From Buildings
	every_scope_building = { 
		limit = {
			is_building_group = bg_military # Derives from barracks and naval bases.
			occupancy >= 0.5
		}
		ROOT = {
			change_variable = { name = jeanist_progress_from_military add = prev.level } #for_each loop, uses similar context to the character component. Iterates through every building in the country matching the filter, gets that building's level, and adds it to the central bonapartist_progress_from_military variable.
		}
	}
	change_variable = { name = jeanist_progress_from_military divide = 100 } #Building levels are converted to decimal. This usually equals something between 1 and 3, with 0.01 = one building level.
	# From Legitimacy
	change_variable = { name = jeanist_progress_from_legitimacy divide = 100 } #Legitimacy divided by 100, to make it minimum 0 and maximum 1.
	change_variable = { name = jeanist_progress_from_legitimacy subtract = 0.5 } #Legitimacy subtracted by 0.5, to make it minimum -0.5 and maximum 0.5. Balanced scale of negative to absolute value.

	#Final Compilation
	change_variable = { name = jeanist_progress_next add = var:jeanist_progress_from_characters } #All sub-variables are added to bonapartist_progress_next here. At this point, all of the component variables are calculated properly, and converted to a decimal scale.
	change_variable = { name = jeanist_progress_next add = var:jeanist_progress_from_igs }
	change_variable = { name = jeanist_progress_next add = var:jeanist_progress_from_military }
	change_variable = { name = jeanist_progress_next add = var:jeanist_progress_from_legitimacy }
	change_variable = { name = jeanist_progress_next add = var:jeanist_progress_from_effects }
}

brg_weekly_pulse_parliamentarian_progress = { #See Legitimist progress to see how this works.
	set_variable = { name = parliamentarian_progress_from_characters value = 0 }
	set_variable = { name = parliamentarian_progress_from_igs value = 0 }
	set_variable = { name = parliamentarian_progress_from_farms value = 0 }
	set_variable = { name = parliamentarian_progress_from_legitimacy value = root.government_legitimacy }
	set_variable = { name = parliamentarian_progress_next value = 0 }
	#From Characters
	every_scope_character = {
		limit = {
			has_ideology = ideology:ideology_parliamentarian
		}
		ROOT = {
			change_variable = { name = parliamentarian_progress_from_characters add = prev.popularity }
		}
	}
	change_variable = { name = parliamentarian_progress_from_characters divide = 100 }
	# From Interest Groups
	every_interest_group = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_parliamentarian
			}
		}
		ROOT = {
			set_variable = { name = ig_weight value = prev.ig_clout }
		}
		if = {
			limit = {
				is_in_government = yes
			}
			ROOT = {
				change_variable = { name = ig_weight multiply = 3 }
			}
		}
		ROOT = {
			change_variable = { name = parliamentarian_progress_from_igs add = var:ig_weight }
		}
	}
	#From Buildings
	every_scope_building = {
		limit = {
			is_building_group = bg_manufacturing
			weekly_profit > 0
		}
		ROOT = {
			change_variable = { name = parliamentarian_progress_from_factories add = prev.level }
		}
	}
	change_variable = { name = parliamentarian_progress_from_factories divide = 100 }
	# From Legitimacy
	change_variable = { name = parliamentarian_progress_from_legitimacy divide = 100 }
	change_variable = { name = parliamentarian_progress_from_legitimacy subtract = 0.5 }

	#Final Compilation
	change_variable = { name = parliamentarian_progress_next add = var:parliamentarian_progress_from_characters }
	change_variable = { name = parliamentarian_progress_next add = var:parliamentarian_progress_from_igs }
	change_variable = { name = parliamentarian_progress_next add = var:parliamentarian_progress_from_factories }
	change_variable = { name = parliamentarian_progress_next add = var:parliamentarian_progress_from_legitimacy }
	change_variable = { name = parliamentarian_progress_next add = var:parliamentarian_progress_from_effects }
}

brg_freeze_dvg_jean_progress = { #Used upon initiation of cement_the_rightful_dynasty, to prevent the bars from excessively accumulating.
	set_variable = brg_dvg_jeanism_freeze
	set_variable = { name = jeanist_progress_next value = 0 }
	set_variable = { name = parliamentarian_progress_next value = 0 }
}

brg_define_leading_faction = { #This scripted effect determines which dynasty is the most powerful one, and sets fra_leading_dynasty_progress to be equal to that dynasty's progress variable. This allows the bar to work, and much easier calculation to take place.
	if = {
		limit = {
			var:jeanist_progress > var:parliamentarian_progress
		}
		set_variable = { name = brg_leading_faction_progress value = var:jeanist_progress }
	}
	else_if = {
		limit = {
			var:parliamentarian_progress > var:jeanist_progress
		}
		set_variable = { name = brg_leading_faction_progress value = var:parliamentarian_progress }
	}
}

# Used in IG scope
fra_disfavor_leader_ig_dynasty = {
	if = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_bonapartist
			}
		}
		owner = {
			custom_tooltip = {
				text = bonapartist_progress_decrease_10_tt
				change_variable = { name = bonapartist_progress subtract = 10 }
			}
		}
	}
	else_if = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_orleanist
			}
		}
		owner = {
			custom_tooltip = {
				text = orleanist_progress_decrease_10_tt
				change_variable = { name = orleanist_progress subtract = 10 }
			}
		}
	}
	else_if = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_legitimist
			}
		}
		owner = {
			custom_tooltip = {
				text = legitimist_progress_decrease_10_tt
				change_variable = { name = legitimist_progress subtract = 10 }
			}
		}
	}
}

# Used in IG scope
fra_favor_leader_ig_dynasty = {
	if = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_bonapartist
			}
		}
		owner = {
			custom_tooltip = {
				text = bonapartist_progress_increase_10_tt
				change_variable = { name = bonapartist_progress add = 10 }
			}
		}
	}
	else_if = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_orleanist
			}
		}
		owner = {
			custom_tooltip = {
				text = orleanist_progress_increase_10_tt
				change_variable = { name = orleanist_progress add = 10 }
			}
		}
	}
	else_if = {
		limit = {
			leader = {
				has_ideology = ideology:ideology_legitimist
			}
		}
		owner = {
			custom_tooltip = {
				text = legitimist_progress_increase_10_tt
				change_variable = { name = legitimist_progress add = 10 }
			}
		}
	}
}

# Country scope
fra_favor_ruler_dynasty = {
	if = {
		limit = {
			ruler_is_bonapartist = yes
		}
		custom_tooltip = {
			text = bonapartist_progress_increase_10_tt
			change_variable = { name = bonapartist_progress add = 10 }
		}
	}
	else_if = {
		limit = {
			ruler_is_orleanist = yes
		}
		custom_tooltip = {
			text = orleanist_progress_increase_10_tt
			change_variable = { name = orleanist_progress add = 10 }
		}
	}
	else_if = {
		limit = {
			ruler_is_legitimist = yes
		}
		custom_tooltip = {
			text = legitimist_progress_increase_10_tt
			change_variable = { name = legitimist_progress add = 10 }
		}
	}
}

# Country scope
fra_disfavor_ruler_dynasty = {
	if = {
		limit = {
			ruler_is_bonapartist = yes
		}
		custom_tooltip = {
			text = bonapartist_progress_decrease_10_tt
			change_variable = { name = bonapartist_progress subtract = 10 }
		}
	}
	else_if = {
		limit = {
			ruler_is_orleanist = yes
		}
		custom_tooltip = {
			text = orleanist_progress_decrease_10_tt
			change_variable = { name = orleanist_progress subtract = 10 }
		}
	}
	else_if = {
		limit = {
			ruler_is_legitimist = yes
		}
		custom_tooltip = {
			text = legitimist_progress_decrease_10_tt
			change_variable = { name = legitimist_progress subtract = 10 }
		}
	}
}

fra_handle_republic_monarch_assignment = { #Used specifically in the case of a Republican France that enacts monarchy, and is now determining its monarch.
	if = {
		limit = { #If the ruler is a Bonapartist, but is not a Bonapartist ruler - eg. a general with the Bonapartist ideology, the monarch is automatically set to the first available Bonaparte.
			ruler = { 
				has_ideology = ideology:ideology_bonapartist
			}
		}
		if = {
			limit = {
				has_variable = orleanist_restoration_var #Misc. variable cleanup, just in case there's anything left in the way.
			}
			remove_variable = orleanist_restoration_var
		}
		if = {
			limit = {
				has_variable = legitimist_restoration_var
			}
			remove_variable = legitimist_restoration_var
		}
		if = {
			limit = {
				has_variable = supporting_orleanist_var
			}
			remove_variable = supporting_orleanist_var
		}
		if = {
			limit = {
				has_variable = supporting_legitimist_var
			}
			remove_variable = supporting_legitimist_var
		}
		set_variable = bonapartist_restoration_var #Bonapartist restoration activated, for the purpose of je_divided_monarchists and other things it tracks.
		change_variable = { name = bonapartist_progress add = 10 } #Gives a bonus to the Bonapartists for this cycle of je_divided_monarchists.
		set_variable = supporting_bonapartist_var #For the character interaction. The player can change this with the buttons whenever they wish.
		hidden_effect = { generate_french_monarch = yes } #Standard generate_french_monarch effect.
	}
	else_if = {
		limit = {
			ruler = {
				has_ideology = ideology:ideology_orleanist
			}
		}
		if = {
			limit = {
				has_variable = legitimist_restoration_var
			}
			remove_variable = legitimist_restoration_var
		}
		if = {
			limit = {
				has_variable = bonapartist_restoration_var
			}
			remove_variable = bonapartist_restoration_var
		}
		if = {
			limit = {
				has_variable = supporting_bonapartist_var
			}
			remove_variable = supporting_bonapartist_var
		}
		if = {
			limit = {
				has_variable = supporting_legitimist_var
			}
			remove_variable = supporting_legitimist_var
		}
		set_variable = orleanist_restoration_var
		change_variable = { name = orleanist_progress add = 10 }
		set_variable = supporting_orleanist_var
		hidden_effect = { generate_french_monarch = yes }
	}
	else_if = {
		limit = {
			ruler = {
				has_ideology = ideology:ideology_legitimist
			}
		}
		if = {
			limit = {
				has_variable = orleanist_restoration_var
			}
			remove_variable = orleanist_restoration_var
		}
		if = {
			limit = {
				has_variable = bonapartist_restoration_var
			}
			remove_variable = bonapartist_restoration_var
		}
		if = {
			limit = {
				has_variable = supporting_bonapartist_var
			}
			remove_variable = supporting_bonapartist_var
		}
		if = {
			limit = {
				has_variable = supporting_orleanist_var
			}
			remove_variable = supporting_orleanist_var
		}
		set_variable = legitimist_restoration_var
		change_variable = { name = legitimist_progress add = 10 }
		set_variable = supporting_legitimist_var
		hidden_effect = { generate_french_monarch = yes }
	}
	else = {
		trigger_event = { id = french_pretenders.7 popup = yes } #If the ruler is neither a Bonapartist, Legitimist, or Orleanist claimant, then it fires this event, which allows either restoring a dynasty of your choice, or making the previous President King. The latter option will cancel out of Divided Monarchists, and add a bunch of radicals.
	}
}
